PreRequisites

Make sure everyone has 

Rails 3, 
RSpec Textmate Bundle
Bundler
ImageMagick installed for paperclip
Git with a github account

1. Set Up and Installation

- create github repository and init locally as per github instructions
- cd out of the home directory and create the rails app
- commit the code 

- Create Gemfile
- Bundle Install Gems
- Install Rspec: rails g rspec:install
- Install Capistrano: capify .
- set Mocha as the default mocking framework

2. Scaffolding films, add validations

-Install the nifty generators layouts and helper:
rails g nifty:layout

-Scaffold Film and take a look at the files generated including config/routes, try out rake routes 
rails g nifty:scaffold Film name:string url:string description:string

-Migrate & Annotate
rake db:create
rake db:migrate
annotate

-Start the webserver and take a look around.
- take a look at the form edit form partial and change description to text area.


- Add basic validation, test this by trying to add an invalid film on page. 
:name, :url, :description

- Run specs again, the model spec for Film should be broken as it's now not valid so create a film Factory Girl to fix the broken spec for a new Film

- Clean out the http:// from URL when it is saved. write a spec then add a before_validation callback.

- Write a set of specs for the Films controller.

3. Create a Home Page and Controller

- Create a home controller with and a home page, delete public.html and fix routing to use this.
- Take a look at the layout and add a title

4. Add Search 

- add a search box to Home page using form_tag, take a look at the authenticity token it inserts 
- create a search controller & search resource with a create method
- create a search/create view
- take a look at ActiveRecord and it's find method
- write a test for the search_controller and implement it.
- implement the index page and have a play...

5. Make it start to feel like a web app by adding some top level navigation
- add a home and films link
- move the search box to the application layout using css for floating nav to the left and search to the right.


**********
ADD IT TO HEROKU
- install heroku gem
- heroku create  #in command line
- git push heroku master
**********

6. Add a rating to the film
- create a migration to add the column
- create a migration to populate existing films with a default rating
- run migration and rerun annotate
- write specs for & update the Film model to validate numericality of rating
- run rake spec, lots of failures which is why we use factory girl rather than create each by hand.
- we have to fix the destroy spec that we did create by hand.
- add the select box for rating to film
- add RedCloth to the show page of the film


7. Add Genre

- rails g nifty:scaffold Genre name:string
- run migration
- write spec and NEGATIVELY validate presence of name
- Examine active record associations
- create the genre_id field in film
- create the association in genre and film
- create a genre spec that ensures all films are destroyed when the genre is destroyed, fix the association to do that
- create a migration that populates genres with an 'other' genre and associate any existing films to that.
- add the select box for genre
- add the Genre link layout

8. Add Devise Authentication

- install the initializers:   rails generate devise:install
- create the user model: rails g devise User
- create the admin model: rails g devise Admin
- create the devise views: rails g devise:views
- lock down the new, edit and destroy methods on the film and genres controller
- add sign-in & sign-out partials to layouts/application.html
- fix all the breaking specs by
	- include the devise test helpers in spec_helper:  config.include Devise::TestHelpers, :type => :controller
	- create user and admin factories
	- add the sign_in method as before(:each) in a block that describes admin functions

9. Add User Comments

- create a comment model and migration: rails g model Comment     NOTE: We're not scaffolding this..
- complete the migration by hand
- add the validation so that a comment must have a user, text and film
- add the film and user associations including destroy so that comments are destroyed when a user or film is..
- go to the spec and add a quick negative spec to test for the validations
- we're going to do a bit of ajax so add the jquery-rails gem and run bundle install
- replace prototype with jquery:  rails g jquery:install
- now take a look at web page source to see what's changed.
- create a comments controller and add the NESTED comments resource to the film resource routes
- create a comments/_comment partial and add this to the film's show page in a comments container
- Add an 'add comment' button and text area to the show page in an add-comment container
- Add a hidden text field tag for the film id so we can conveninetky use it in ajax.
- Create the client side javascript in the application.js file & test this using console to see the server return 404.
- Create a spec for the comments controller and make the comments controller pass the test.
- Add the unobtrusive javascript link to the comments partial to delete a comment
- Add destroy to config routes resource, write the comment controller destroy spec and action.

10. Paperclip

- add an attachable photo to film model:  has_attached_file :photo, :styles => { :medium => "300x300>", :thumb => "100x100>" } 
******************************************************************************************
***** DON"T FORGET TO ADD THE PHOTO to the attribute_accessible list in film"
******************************************************************************************
- create the migration film_photo
- make the edit form multipart with:	 @film, :html => { :multipart => true }
- add the file_field to the film edit form.
- upload an image and see where it goes.
- add the image_tag to the show form
- add the thumb to the index page


11. Delayed Job
- create the method scrape_price in film - be sure to require 'open-uri', 'net/http'
- create the migration for the film price
- add the value to the show page
- test in console on a play.com film page
- generate the delayed job migration:  rails g delayed_job
- make scrape_price work asynchronously
- open a console and call .scrape_price on the film
- rake jobs:work in a new console tab to start workers, check price again


CHEAT SHEETS for film routing

Film Routing Cheat Sheet:

1. Get a list films:

films_path  >  /films > calls 'def index' in controller when request is a GET


2. Show a single film with id 456

film_path(film) or film_path(456) > /films/456 > calls 'def show' in controller with params[:id] = 456 when request is a GET


3. New then Create

new_film_path > /films/new > calls 'def new' in controller when request is a GET 

films_path > /films > calls 'def create' in controller when request is a POST



4. Edit then Update a film with id 789

edit_film_path(film) > /films/789/edit > calls 'def edit' in controller with params[:id] = 789 when request is a GET

film_path(film) or films_path(789)  >  /films/789 > calls 'def update' in controller with params[:id] = 789 when request is UPDATE


5. Destroy a film with id 968

film_path(film) or film_path(968) > /films/968 > calls 'def destroy' in controller when request is DELETE


DO ANOTHER CHEAT SHEET FOR  controller specs matching the spec to the action being tested...
  

  
   





